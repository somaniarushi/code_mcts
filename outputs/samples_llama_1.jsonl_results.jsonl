{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = \"\"\n    for char in paren_string:\n        if char == '(':\n            group += char\n        elif char == ')':\n            if group:\n                group += char\n                result.append(group)\n                group = \"\"\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "```\nresult = [numbers[0]]\nfor num in numbers[1:]:\n    result.append(delimeter)\n    result.append(num)\nreturn result\n```", "result": "failed: invalid syntax (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/6", "completion": "```\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for paren in group:\n            if paren == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif paren == ')':\n                level -= 1\n        result.append(max_level)\n    return result```", "result": "failed: invalid syntax (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = 0\n    product_numbers = 1\n\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n\n    return sum_numbers, product_numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]\n    return string + string[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(a_bit)^int(b_bit)) for a_bit, b_bit in zip(a, b))", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join([str(i) for i in range(n + 1)])", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = {')': 2, '|': 1, '': 4}\n    result = []\n    temp = ''\n    for char in music_string:\n        if char in beats:\n            if temp:\n                result.append(int(beats[temp]))\n                temp = ''\n        else:\n            temp += char\n    if temp:\n        result.append(int(beats[temp]))\n    return result", "result": "failed: 'o o o o'", "passed": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    pos = 0\n    while pos < len(string):\n        pos = string.find(substring, pos)\n        if pos == -1:\n            return count\n        count += 1\n        pos += len(substring)\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    sorted_nums = sorted([num_dict[num] for num in nums])\n    return ' '.join([str(num_dict[num]) for num in [(key) for key in num_dict for num in sorted_nums if num == num_dict[key]]]", "result": "failed: '(' was never closed (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two elements\")\n\n    numbers = sorted(set(numbers))  # Remove duplicates and sort the list\n    min_diff = float('inf')  # Initialize the minimum difference\n    closest_pair = (numbers[0], numbers[0])  # Initialize the closest pair\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        return numbers  # or raise an exception\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    scaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return scaled", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            return d\n    return 1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "```\ndef find_zero(xs: list):\n    def poly(xs: list, x: float)-> float:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    a_n = max([abs(i) for i in xs])\n    x0 = x\n    tol = 1e-8\n    for _ in range(1000):\n        x1 = x0 - poly(xs, x0) / poly([i * xi for i, xi in zip(xs, [x0**i for i in range(len(xs))])], x0)\n        if abs(x1 - x0) < tol:\n            return round(x1, 2)\n        x0 = x1\n    raise RuntimeError(\"Failed to find zero within 1000 iterations\")\n```", "result": "failed: invalid syntax (<string>, line 24)", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x if i % 3 != 0 else sorted([y for j, y in enumerate(l)] if j % 3 == 0)[0] for i, x in enumerate(l)]", "result": "failed: expected 'else' after 'if' expression (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "max_element = max", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return [i if i % 2 != 0 else sorted(i for i in l if i % 2 == 0)[::-1][j % len(sorted(i for i in l if i % 2 == 0))] for j, i in enumerate(l)]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s [(3 * i):min((3 * i + 3), len(s))] for i in range(len(s) // 3)]\n    # decode each group. Group has 'last' character at the first position, and other two at the end.\n    groups = [group[-1] + group[1:-1] for group in groups]\n    return \"\".join(groups)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    a, b = 1, 1\n    count = 1\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n\ndef is_prime(num: int):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l = sorted(set(l))\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    result = 0 \n    for i in range(n):\n        rightcars = [i for _ in range(n)]\n        for j in range(n):\n            leftcars = rightcars.copy()\n            leftcars.append(leftcars.pop(0))\n            num_collision = 0\n            while len(leftcars) > 0:\n                for l in leftcars:\n                    for r in rightcars:\n                        if l < r:\n                            rightcars.remove(r)\n                            num_collision += 1\n                            rightcars.sort()\n                            break\n                    else:\n                        continue\n                    break\n                leftcars.sort()\n            result += num_collision + 1\n    return result // 2", "result": "timed out", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i + 1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    convertString = \"0123456789ABCDEF\"\n    temp, result = divmod(x, base)\n    if temp > 0:\n        result = change_base(temp, base) + convertString[result]\n    return result", "result": "failed: unsupported operand type(s) for +: 'int' and 'str'", "passed": false}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "Here is the completion of the code snippet:\n\n```\ndef fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_list.append(fib4_list[i - 1] + fib4_list[i - 2] + fib4_list[i - 3] + fib4_list[i - 4])\n\n    return fib4_list[n]\n```", "result": "failed: invalid syntax (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    midpoint = n // 2\n    if n % 2 == 0:\n        return (l[midpoint-1] + l[midpoint]) / 2\n    else:\n        return l[midpoint]", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(n, p-2, p)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "```\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n```", "result": "failed: invalid syntax (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list,threshold: int):\n    return all(i < threshold for i in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1", "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    bracket_map = {\">\": \"<\"}\n    open_bracket = \"<\"\n    for bracket in brackets:\n        if bracket == open_bracket:\n            stack.append(bracket)\n        elif bracket in bracket_map:\n            if not stack or stack.pop() != bracket_map[bracket]:\n                return False\n    return not stack", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    is_increasing = l[i] <= l[i + 1] for i in range(len(l) - 1)\n    is_decreasing = l[i] >= l[i + 1] for i in range(len(l) - 1)\n    return all(is_increasing) or all(is_decreasing)", "result": "failed: invalid syntax (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1 & set2\n    return sorted(list(common_elements))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(k: int):\n        if k < 2:\n            return False\n        for i in range(2, int(k**0.5) + 1):\n            if k % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            factors.append(i)\n    largest_prime = max([i for i in factors if is_prime(i)])\n    return largest_prime", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(0)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop(0)\n    return not stack", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs[1:], 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        prev_prev, prev, current = 0, 0, 1\n        for _ in range(3, n+1):\n            prev_prev, prev, current = prev, current, prev_prev + prev + current\n        return current", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "```\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            if char.lower() == 'y' and s.index(char) == len(s) - 1:\n                continue\n            count += 1\n    return count\n```", "result": "failed: invalid syntax (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)\n    shift = shift % len(str_x)\n    return str_x[-shift:] + str_x[:-shift]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    words = s.split()\n    apples = int((words[0] == \"and\") and int(words[-5][:-6]) or int(words[-4][:-5]))\n    oranges = int(words[-2][:-7])\n    return n - apples - oranges", "result": "failed: invalid literal for int() with base 10: 'a'", "passed": false}
{"task_id": "HumanEval/68", "completion": "```\ndef pluck(arr):\n    even_nodes = [(node, index) for index, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    return [min(node for node, _ in even_nodes), even_nodes.index(min(even_nodes, key=lambda x: x[1]))]", "result": "failed: invalid syntax (<string>, line 36)", "passed": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max((i for i in set(lst) if lst.count(i) >= i), default=-1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    q_str = str(q)\n    if q_str != q_str[::-1]:\n        return False\n    return sum(q) <= w", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    arr_str = ''.join(map(str, arr))\n    arr_rev = arr_str[::-1]\n    diff_count = 0\n    for i in range(len(arr)):\n        if arr_str[i] != arr_rev[i]:\n            diff_count += 1\n    return diff_count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "completion": "```\ndef total_match(lst1, lst2):\n    total_chars1 = sum(len(i) for i in lst1)\n    total_chars2 = sum(len(i) for i in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1\n```", "result": "failed: invalid syntax (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        \"\"\"Check if a number is prime\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = [i for i in range(2, a+1) if a % i == 0]\n    factors.sort()\n    count = 0\n    for factor in factors:\n        if is_prime(factor):\n            count += 1\n        if count >= 3:\n            break\n    return count >= 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    import math\n    if n == 1:\n        return False\n    if n == 0:\n        return False\n    if x < 1:\n        return False\n    if n < 1:\n        return False\n    root = round(math.pow(x, 1/n))\n    return root ** n == x", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    root = round(a ** (1. / 3))\n    return root ** 3 == a", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "```\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/81", "completion": "```\ndef numerical_letter_grade(grades):\n    grades = [float(i) if isinstance(i, int) else i for i in grades]\n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g > 3.7:\n            letter_grades.append('A')\n        elif g > 3.3:\n            letter_grades.append('A-')\n        elif g > 3.0:\n            letter_grades.append('B+')\n        elif g > 2.7:\n            letter_grades.append('B')\n        elif g > 2.3:\n            letter_grades.append('B-')\n        elif g > 2.0:\n            letter_grades.append('C+')\n        elif g > 1.7:\n            letter_grades.append('C')\n        elif g > 1.3:\n            letter_grades.append('C-')\n        elif g > 1.0:\n            letter_grades.append('D+')\n        elif g > 0.7:\n            letter_grades.append('D')\n        elif g > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n```", "result": "failed: invalid syntax (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    length = len(string)\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return is_prime(length)", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n < 1:\n        return \"Input should be a positive integer.\"\n\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    return sum(int(digit) for digit in binary)", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)", "result": "failed: name 'lst' is not defined", "passed": false}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = [(i, j) for i, row in enumerate(lst) for j, value in enumerate(row) if value == x]\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    array_copy = array.copy()\n    if sum(array[0], array[-1]) % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n    return array_copy", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2 * 2b) % 26 + ascii_offset)\n        else:\n            result += char\n    return result", "result": "failed: invalid decimal literal (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    if len(set(lst)) == 1:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split(' !')  # split the string into sentences\n    sentences = [s for s in sentences if s]  # remove empty strings\n    return sum(1 for sentence in sentences if sentence.lstrip().startswith('I'))  # count the number of boreddoms", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and ((x == y + z) or (y == x + z) or (z == x + y))", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            result += char\n    return result", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and is_prime(num):\n            max_prime = num\n    return sum(map(int, str(max_prime)))", "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    if all(isinstance(key, str) and key.islower() for key in dict.keys()):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in dict.keys()):\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    result = []\n    for i in range(2, n):\n        if all(i % j > 0 for j in range(2, int(i**0.5) + 1)):\n            result.append(i)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        value = float(value)\n    except ValueError:\n        return \"Error: Input is not a number.\"\n    integer_value = int(value)\n    decimal_part = value - integer_value\n    if decimal_part > 0.5:\n        return integer_value + 1\n    elif decimal_part < -0.5:\n        return integer_value - 1\n    else:\n        return integer_value", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    piles = [n]\n    for i in range(1, n):\n        piles.append(piles[-1] + 3 if len(piles) % 2 else piles[-1] + 2)\n    return piles", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(\",\", \" \").split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    even_nums = [i for i in range(x, y+1) if i%2 == 0]\n    if even_nums:\n        return max(even_nums)\n    else:\n        return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total // (m - n + 1)\n    if total % (m - n + 1) >= (m - n + 1) // 2:\n        avg += 1\n    return bin(avg)[2:]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = [i for i in x if '0' not in str(i) or str(i).count('0') == str(i).count('2') or str(i).count('0') == str(i).count('4') or str(i).count('0') == str(i).count('6') or str(i).count('0') == str(i).count('8')]\n    result.sort()\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = sorted([i for i in arr if 1 <= i <= 9])\n    reversed_filtered_arr = filtered_arr[::-1]\n    return [names[i-1] for i in reversed_filtered_arr]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nimport math\ndef factorial(k):\n    return math.prod(range(1, k+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        num = int(str(i)[::-1])\n        if num == i:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if isinstance(num, int) and num < 0:\n            num = str(num)[1:]\n        elif isinstance(num, int):\n            num = str(num)\n        else:\n            continue\n        if sum(int(i) for i in num) > 0:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    arr.sort()\n    target = [i for i in arr]\n    target.reverse()\n    for i in range(len(arr)):\n        k = i\n        while k < len(arr):\n            if arr[k] != target[i]:\n                return False\n            k += 1\n    return True", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    lst1_odd_count = lst1.count(1)\n    odd_count_difference = lst1_odd_count - lst2.count(1)\n    \n    if odd_count_difference == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    words = test.split()\n    letter_count = {}\n    \n    for word in words:\n        for letter in word:\n            if letter in letter_count:\n                letter_count[letter] += 1\n            else:\n                letter_count[letter] = 1\n                \n    max_count = max(letter_count.values())\n    result = {k: v for k, v in letter_count.items() if v == max_count}\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    new_string = ''\n    for char in s:\n        if char not in c:\n            new_string += char\n    return new_string, new_string == new_string[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, start=1):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{i}ng {i} of the {i}nput.\")\n    return result", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if sum(nums) <= 0:\n        return min(nums)\n    min_sum = float('inf')\n    left = 0\n    curr_sum = 0\n    for right in range(len(nums)):\n        curr_sum += nums[right]\n        while curr_sum > 0 and left <= right:\n            min_sum = min(min_sum, curr_sum)\n            curr_sum -= nums[left]\n            left += 1\n    return -min_sum if min_sum > 0 else min_sum", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    bucket_volume = sum([cell for row in grid for cell in row]) // capacity\n    volume_left = sum([cell for row in grid for cell in row]) % capacity\n    buckets_needed = bucket_volume + (volume_left > 0)\n\n    return buckets_needed", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "```\ndef select_words(s, n):\n    words_to_check = s.split()\n    words = []\n    for word in words_to_check:\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    return words", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    word = word.lower()\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            if i > 0 and word[i-1].lower() not in 'aeiou':\n                if i < len(word) - 1 and word[i+1].lower() not in 'aeiou':\n                    return word[i]\n    return \"\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "```\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "result": "failed: invalid syntax (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(i for i, x in enumerate(lst) if x % 2 != 0 and i % 2 == 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n    sequence.append(1)\n    return sorted([num for num in sequence if num % 2 != 0])", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "```\ndef valid_date(date_str):\n    parts = date_str.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = map(int, parts)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    return True", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 0:\n        return words\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        letters = [char for char in txt if char.islower()]\n        return sum(ord(char) % 2 for char in letters)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            if lst[i] == lst[i + 1]:\n                return False\n    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/127", "completion": "```\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    return \"NO\"", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    signs = 1\n    for num in arr:\n        if num < 0:\n            signs *= -1\n        elif num == 0:\n            return 0\n    \n    return sum(abs(num) for num in arr) * signs", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "Here is the completion of the code:\n\n```\ndef minPath(grid, k):\n    N = len(grid)\n    res = []\n    min_val = float('inf')\n\n    def dfs(x, y, path, cur_sum):\n        nonlocal res, min_val\n        if len(path) == k:\n            if cur_sum < min_val:\n                min_val = cur_sum\n                res = list(path)\n        else:\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] not in path:\n                    dfs(nx, ny, path + [grid[nx][ny]], cur_sum + grid[nx][ny])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [], grid[i][j])\n\n    return res\n```", "result": "failed: invalid syntax (<string>, line 32)", "passed": false}
{"task_id": "HumanEval/130", "completion": "```\ndef tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for _ in range(3, n + 1):\n            if _ % 2 == 0:\n                result.append(1 + _ / 2)\n            else:\n                a, b = result[-2], result[-3]\n                result.append(a + b + (result[-1] if _ + 1 <= len(result) else 3))\n        return result", "result": "failed: invalid syntax (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "from math import ceil\n\ndef sum_squares(lst):\n    return sum(ceil(num) ** 2 for num in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if len(words) > 0:\n        last_word = words[-1]\n        if len(last_word) > 0:\n            if last_word[-1].isalpha() and not last_word[-1].isspace():\n                return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i-1] >= arr[i]:\n            return i-1\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    \n    a = None\n    b = None\n    \n    if negative:\n        a = max(negative)\n    if positive:\n        b = min(positive)\n    \n    return (a, b)\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))  # (None, None)\nprint(largest_smallest_integers([0]))  # (None, None)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        a, b = float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\"))\n    except ValueError:\n        pass\n    if a > b:\n        return str(a) if type(a) == float else a\n    elif b > a:\n        return str(b) if type(b) == float else b\n    else:\n        return None", "result": "failed: 'int' object has no attribute 'replace'", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for a in range(2, n + 1, 2):\n        for b in range(2, n + 1, 2):\n            for c in range(2, n + 1, 2):\n                for d in range(2, n + 1, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"_-\").replace(\"   \", \"-\").replace(\"    \", \"-\")", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    dots = file_name.count('.')\n    if dots != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0][0].isalpha():\n        return 'No'\n    digits = sum(c.isdigit() for c in file_name)\n    if digits > 3:\n        return 'No'\n    extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in extensions:\n        return 'No'\n    return 'Yes'", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum_result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum_result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum_result += lst[i]**3\n    return sum_result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    num_x = int((map(int, x.split('/'))[0] * map(int, n.split('/'))[1]))\n    denom_x = int((map(int, x.split('/'))[1] * map(int, n.split('/'))[0]))\n    if gcd(denom_x, num_x) == 1:\n        return True\n    else:\n        return False\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "result": "failed: 'map' object is not subscriptable", "passed": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted((sum(int(digit) for digit in str(num)), num) for num in nums)[::-1]", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num // 10 % 10 % 2 != 0:\n                count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i < j and j < a.index(a[j]) and a[i] + a[j] + (a[n - 1] - a[j] + 1) % 3 == 0:\n                count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "completion": "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\ndef bf(planet1, planet2):\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index2 < index1:\n        index2, index1 = index1, index2\n    return tuple(planets[index1+1:index2])\n\nprint(bf(\"Jupiter\", \"Neptune\"))  # returns (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # returns (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # returns (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([x for x in lst if len(x) % 2 == 0])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(m):\n        if m < 2:\n            return False\n        for i in range(2, int(m**0.5) + 1):\n            if m % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            total += num ** 2\n    return total", "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "completion": "```\ndef compare(game, guess):\n    return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]", "result": "failed: invalid syntax (<string>, line 17)", "passed": false}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return (sum(1 for char in extension if char.isupper()) -\n                sum(1 for char in extension if char.islower()))\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    return b in a + a or a in b + b", "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n    roman = ''\n    for numeral, integer in roman_numerals.items():\n        while number >= integer:\n            number -= integer\n            roman += numeral\n    return roman.lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    a, b, c = sorted([a, b, c])  # sort the sides\n    if a**2 + b**2 == c**2:  # check if it's a right-angled triangle\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        chars = set(word)\n        if len(chars) > max_chars:\n            max_chars = len(chars)\n            max_word = word\n    return max_word", "result": "failed: t2", "passed": false}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = number + min(need - number, remaining)\n    return [eaten, remaining - (eaten - number)]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operands):\n    result = operands[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operands[i + 1]\n        elif operator[i] == '-':\n            result -= operands[i + 1]\n        elif operator[i] == '*':\n            result *= operands[i + 1]\n        elif operator[i] == '//':\n            result //= operands[i + 1]\n        elif operator[i] == '**':\n            result **= operands[i + 1]\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    reverse = False\n    for char in s:\n        if not char.isalnum() and char != ' ':\n            result += char\n            reverse = not reverse\n        else:\n            if reverse:\n                result += char.swapcase()\n            else:\n                result += char\n    return result if s.isalpha() else result[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if str(i).count(\"2\") > 0 and str(i).count(\"4\") > 0 and str(i).count(\"6\") > 0 and str(i).count(\"8\") > 0]", "result": "failed: Test 1", "passed": false}
